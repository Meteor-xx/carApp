package com.http.engine;


import android.text.TextUtils;

import java.io.IOException;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLSession;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.logging.HttpLoggingInterceptor;

/**
 * Created by admin on 2015/12/4.
 */
public class OkHttpUtil {
    private static OkHttpClient mOkHttpClient = null;

    static {
        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {
            @Override
            public void log(String message) {
                String jsonLog = HttpLogger.jsonLog(message);
                if(!TextUtils.isEmpty(jsonLog)) {
                    HttpLogger.v("okhttplog", jsonLog);
                } else {
                    HttpLogger.v("okhttplog", message);
                }
            }
        });
        loggingInterceptor.setLevel(BuildConfig.DEBUG ? HttpLoggingInterceptor.Level.BODY : HttpLoggingInterceptor.Level.NONE);
        OkHttpClient.Builder builder = new OkHttpClient.Builder().addInterceptor(loggingInterceptor).readTimeout(10, TimeUnit.SECONDS).writeTimeout(60, TimeUnit.SECONDS).connectTimeout(10, TimeUnit.SECONDS);

        HttpsUtils.SSLParams sslParams = HttpsUtils.getSslSocketFactory(null, null, null);
//        builder.sslSocketFactory(sslParams.sSLSocketFactory, sslParams.trustManager).hostnameVerifier(new HostnameVerifier() {
//            @Override
//            public boolean verify(String s, SSLSession sslSession) {
//                return true;
//            }
//        });

        mOkHttpClient = builder.build();

        OkHttpUtils.initClient(mOkHttpClient);
    }

    /**
     * 该不会开启异步线程。
     *
     * @param request
     * @return
     * @throws IOException
     */
    public static Response execute(Request request) throws IOException {
        return mOkHttpClient.newCall(request).execute();
    }

    /**
     * 开启异步线程访问网络
     *
     * @param request
     * @param responseCallback
     */
    public static void enqueue(Request request, Callback responseCallback) {
        mOkHttpClient.newCall(request).enqueue(responseCallback);
    }

    /**
     * 开启异步线程访问网络, 且不在意返回结果（实现空callback）
     *
     * @param request
     */
    public static void enqueue(Request request) {
        mOkHttpClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {

            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {

            }
        });
    }

    public static String getStringFromServer(String url) throws IOException {
        Request request = new Request.Builder().url(url).build();
        Response response = execute(request);
        if (response.isSuccessful()) {
            String responseUrl = response.body().string();
            return responseUrl;
        } else {
            throw new IOException("Unexpected code " + response);
        }
    }

    private static final String CHARSET_NAME = "UTF-8";

    /**
     * 为HttpGet 的 url 方便的添加1个name value 参数。
     *
     * @param url
     * @param name
     * @param value
     * @return
     */
    public static String attachHttpGetParam(String url, String name, String value) {
        return url + "?" + name + "=" + value;
    }

    public static String attachHttpGetParam(String url, Map<String, String> paramMap) {
        if (paramMap != null && paramMap.size() > 0) {
            StringBuffer URL = new StringBuffer();
            URL.append(url).append("?");
            Set<String> keys = paramMap.keySet();
            Iterator<String> it = keys.iterator();
            while (it.hasNext()) {
                String key = it.next();
                String value = paramMap.get(key);
                URL.append(key).append("=").append(value);
                if (it.hasNext()) {
                    URL.append("&");
                }
            }
            return URL.toString();
        }
        return url;
    }

    /**
     * 拼装字符串，然后进行MD5加密
     *
     * @param solidKey
     * @param values
     * @return
     */
    public static String getParamsSignString(String solidKey, String... values) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(solidKey);
        if (values != null && values.length > 0) {
            for (String value : values) {
                buffer.append(value);
            }
        }
        return MD5Util.encrypt(buffer.toString());
    }


}
