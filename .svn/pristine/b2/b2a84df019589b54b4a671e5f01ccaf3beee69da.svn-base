package yunkeiot.com.carapp.mapOptions;

import android.content.Context;

import com.baidu.location.BDAbstractLocationListener;
import com.baidu.location.BDLocation;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.mapapi.model.LatLng;

import java.util.ArrayList;
import java.util.List;

public class CALocationMgr extends BDAbstractLocationListener {
    private LocationClient mLocationClient = null;
    private static CALocationMgr caLocationMgr;
    private BDLocation location;
    private List<CAOnLocationChangedListener> locationChangedListeners = new ArrayList<>();

    /**
     * 配置定位参数
     * @param context
     */
    public CALocationMgr(Context context) {
        mLocationClient = new LocationClient(context);
        //声明LocationClient类
        mLocationClient.registerLocationListener(this);
        LocationClientOption option = new LocationClientOption();
        option.setLocationMode(LocationClientOption.LocationMode.Hight_Accuracy);
        //可选，默认高精度，设置定位模式，高精度，低功耗，仅设备
        option.setCoorType("bd09ll");//可选，默认gcj02，设置返回的定位结果坐标系
        int span = 1000;
        option.setScanSpan(span);//可选，默认0，即仅定位一次，设置发起定位请求的间隔需要大于等于1000ms才是有效的
        option.setIsNeedAddress(true);//可选，设置是否需要地址信息，默认不需要
        option.setOpenGps(true);//可选，默认false,设置是否使用gps
        option.setNeedDeviceDirect(true);
        option.setLocationNotify(true);//可选，默认false，设置是否当gps有效时按照1S1次频率输出GPS结果
        option.setIsNeedLocationDescribe(false);//可选，默认false，设置是否需要位置语义化结果，可以在BDLocation.getLocationDescribe里得到，结果类似于“在北京天安门附近”
        option.setIsNeedLocationPoiList(true);//可选，默认false，设置是否需要POI结果，可以在BDLocation.getPoiList里得到
        option.setIgnoreKillProcess(false);//可选，默认true，定位SDK内部是一个SERVICE，并放到了独立进程，设置是否在stop的时候杀死这个进程，默认不杀死
        option.SetIgnoreCacheException(false);//可选，默认false，设置是否收集CRASH信息，默认收集
        option.setEnableSimulateGps(false);//可选，默认false，设置是否需要过滤gps仿真结果，默认需要
        option.setIsNeedLocationDescribe(true);
        mLocationClient.setLocOption(option);
    }

    public static CALocationMgr getInstance(Context context) {
        if (caLocationMgr == null) {
            caLocationMgr = new CALocationMgr(context);
        }
        return caLocationMgr;
    }

    @Override
    public void onReceiveLocation(BDLocation bdLocation) {
        this.location = bdLocation;
        updateLocationChanged();
    }

    private void updateLocationChanged(){
        for (CAOnLocationChangedListener listener : locationChangedListeners) {
            if (listener != null) {
                listener.onLocationChanged(location);
            }
        }
    }

    public void locationStart() {
        mLocationClient.start();
    }

    public void locationStop() {
        mLocationClient.stop();
    }

    public BDLocation getLocation() {
        return location;
    }

    public LatLng getCurrentLatLng() {
        if (location != null) {
            return new LatLng(location.getLatitude(), location.getLongitude());
        }
        return null;
    }

    public void setOnLocationChangedListener(CAOnLocationChangedListener locationChangedListener) {
        if (!locationChangedListeners.contains(locationChangedListener)) {
            locationChangedListeners.add(locationChangedListener);
        }
        locationStart();
        updateLocationChanged();
    }

    public void removeLocationChangedListener(CAOnLocationChangedListener locationChangedListener) {
        if (locationChangedListeners.contains(locationChangedListener)) {
            locationChangedListeners.remove(locationChangedListener);
        }
    }



}
